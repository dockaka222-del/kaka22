"use client"

import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { toast } from "sonner";

// Voice Cloning Components
import FileUpload from '@/components/voice-cloning/FileUpload';
import AdvancedSettings from '@/components/voice-cloning/AdvancedSettings';
import ProgressBar from '@/components/voice-cloning/ProgressBar';
import ResultSection from '@/components/voice-cloning/ResultSection';

// Types and Utils
import { 
  AudioFile, 
  VoiceCloningSettings, 
  ProcessingStatus, 
  VoiceCloningResponse 
} from '@/types/voice-cloning';
import { DEFAULT_SETTINGS, PROCESSING_STAGES } from '@/lib/constants';
import { uploadAudioFile, processVoiceCloning } from '@/lib/api-client';
import { validateText, storage } from '@/lib/utils';

// Storage keys
const STORAGE_KEYS = {
  SETTINGS: 'voice-cloning-settings',
  HISTORY: 'voice-cloning-history',
  LAST_TEXT: 'voice-cloning-last-text'
};

export default function VoiceClonePage() {
  // State management
  const [selectedAudio, setSelectedAudio] = useState<AudioFile | null>(null);
  const [inputText, setInputText] = useState(() => 
    storage.get(STORAGE_KEYS.LAST_TEXT, '')
  );
  const [settings, setSettings] = useState<VoiceCloningSettings>(() => 
    storage.get(STORAGE_KEYS.SETTINGS, DEFAULT_SETTINGS)
  );
  const [processingStatus, setProcessingStatus] = useState<ProcessingStatus>({
    isProcessing: false,
    progress: 0,
    message: '',
    stage: 'upload'
  });
  const [result, setResult] = useState<VoiceCloningResponse | null>(null);
  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);

  // Save settings to localStorage when changed
  const handleSettingsChange = useCallback((newSettings: VoiceCloningSettings) => {
    setSettings(newSettings);
    storage.set(STORAGE_KEYS.SETTINGS, newSettings);
  }, []);

  // Save text to localStorage
  const handleTextChange = useCallback((text: string) => {
    setInputText(text);
    storage.set(STORAGE_KEYS.LAST_TEXT, text);
  }, []);

  // File selection handler
  const handleFileSelect = useCallback((audioFile: AudioFile | null) => {
    setSelectedAudio(audioFile);
    // Reset result when new file is selected
    setResult(null);
  }, []);

  // Process voice cloning
  const handleProcessVoiceCloning = useCallback(async () => {
    if (!selectedAudio) {
      toast.error('Vui l√≤ng ch·ªçn file √¢m thanh m·∫´u');
      return;
    }

    // Validate text
    const textValidation = validateText(inputText);
    if (!textValidation.isValid) {
      toast.error(textValidation.error);
      return;
    }

    setResult(null);
    setProcessingStatus({
      isProcessing: true,
      progress: 10,
      message: PROCESSING_STAGES.UPLOAD,
      stage: 'upload'
    });

    try {
      // Step 1: Upload audio file
      const uploadResult = await uploadAudioFile(selectedAudio.file);
      
      if (!uploadResult.success) {
        throw new Error(uploadResult.error || 'L·ªói t·∫£i file l√™n');
      }

      setProcessingStatus({
        isProcessing: true,
        progress: 30,
        message: PROCESSING_STAGES.PROCESSING,
        stage: 'processing'
      });

      // Step 2: Process voice cloning
      const processingResult = await processVoiceCloning(
        inputText,
        uploadResult.filePath!,
        settings
      );

      setProcessingStatus({
        isProcessing: true,
        progress: 80,
        message: PROCESSING_STAGES.GENERATING,
        stage: 'generating'
      });

      // Simulate final processing delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      if (!processingResult.success) {
        throw new Error(processingResult.error || 'L·ªói x·ª≠ l√Ω voice cloning');
      }

      // Step 3: Complete
      setProcessingStatus({
        isProcessing: false,
        progress: 100,
        message: PROCESSING_STAGES.COMPLETE,
        stage: 'complete'
      });

      setResult(processingResult);
      toast.success('Voice cloning ho√†n th√†nh!');

      // Save to history
      // Implementation for history can be added here

    } catch (error) {
      console.error('Voice cloning error:', error);
      
      setProcessingStatus({
        isProcessing: false,
        progress: 0,
        message: PROCESSING_STAGES.ERROR,
        stage: 'error'
      });

      toast.error(error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra');
    }
  }, [selectedAudio, inputText, settings]);

  // Reset for new processing
  const handleNewProcessing = useCallback(() => {
    setResult(null);
    setProcessingStatus({
      isProcessing: false,
      progress: 0,
      message: '',
      stage: 'upload'
    });
  }, []);

  // Check if ready to process
  const isReadyToProcess = selectedAudio && inputText.trim().length > 0 && !processingStatus.isProcessing;

  return (
    <div className="container mx-auto max-w-4xl py-8 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
          Voice Cloning AI
        </h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          T·∫°o gi·ªçng n√≥i AI t·ª´ m·∫´u √¢m thanh c·ªßa b·∫°n. Nh·∫≠p vƒÉn b·∫£n ti·∫øng Vi·ªát v√† nghe AI ƒë·ªçc v·ªõi gi·ªçng n√≥i ƒë√£ nh√¢n b·∫£n.
        </p>
      </div>

      {/* Main Content */}
      <div className="grid gap-8">
        {/* Step 1: Upload Audio */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <span className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-sm font-bold">
                1
              </span>
              <span>Ch·ªçn file √¢m thanh m·∫´u</span>
            </CardTitle>
            <CardDescription>
              Upload file √¢m thanh ch·ª©a gi·ªçng n√≥i b·∫°n mu·ªën nh√¢n b·∫£n. Ch·∫•t l∆∞·ª£ng √¢m thanh t·ªët s·∫Ω cho k·∫øt qu·∫£ t·ªët h∆°n.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <FileUpload
              onFileSelect={handleFileSelect}
              selectedFile={selectedAudio}
              isProcessing={processingStatus.isProcessing}
            />
          </CardContent>
        </Card>

        {/* Step 2: Input Text */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <span className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-sm font-bold">
                2
              </span>
              <span>Nh·∫≠p vƒÉn b·∫£n c·∫ßn ƒë·ªçc</span>
            </CardTitle>
            <CardDescription>
              Vi·∫øt vƒÉn b·∫£n ti·∫øng Vi·ªát m√† b·∫°n mu·ªën AI ƒë·ªçc v·ªõi gi·ªçng n√≥i ƒë√£ nh√¢n b·∫£n.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="input-text">VƒÉn b·∫£n (t·ªëi ƒëa 2000 k√Ω t·ª±)</Label>
              <Textarea
                id="input-text"
                placeholder="Nh·∫≠p vƒÉn b·∫£n ti·∫øng Vi·ªát m√† b·∫°n mu·ªën AI ƒë·ªçc..."
                value={inputText}
                onChange={(e) => handleTextChange(e.target.value)}
                disabled={processingStatus.isProcessing}
                rows={6}
                className="resize-none"
                maxLength={2000}
              />
              <div className="flex justify-between text-sm text-muted-foreground">
                <span>Ti·∫øng Vi·ªát ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß</span>
                <span>{inputText.length}/2000 k√Ω t·ª±</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Step 3: Advanced Settings */}
        <AdvancedSettings
          settings={settings}
          onSettingsChange={handleSettingsChange}
          isOpen={showAdvancedSettings}
          onOpenChange={setShowAdvancedSettings}
          isProcessing={processingStatus.isProcessing}
        />

        {/* Processing Button */}
        <Card>
          <CardContent className="py-6">
            <div className="text-center space-y-4">
              <Button
                onClick={handleProcessVoiceCloning}
                disabled={!isReadyToProcess}
                size="lg"
                className="px-8 py-4 text-lg h-auto"
              >
                {processingStatus.isProcessing ? (
                  <>
                    <div className="animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  <>
                    üéµ B·∫Øt ƒë·∫ßu Voice Cloning
                  </>
                )}
              </Button>
              
              {!selectedAudio && (
                <p className="text-sm text-muted-foreground">
                  Vui l√≤ng ch·ªçn file √¢m thanh m·∫´u ƒë·ªÉ ti·∫øp t·ª•c
                </p>
              )}
              
              {selectedAudio && !inputText.trim() && (
                <p className="text-sm text-muted-foreground">
                  Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ ti·∫øp t·ª•c
                </p>
              )}
              
              {isReadyToProcess && (
                <p className="text-sm text-muted-foreground">
                  S·∫µn s√†ng x·ª≠ l√Ω! Qu√° tr√¨nh c√≥ th·ªÉ m·∫•t t·ª´ 30 gi√¢y ƒë·∫øn v√†i ph√∫t.
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Progress Bar */}
        {(processingStatus.isProcessing || processingStatus.stage === 'complete' || processingStatus.stage === 'error') && (
          <ProgressBar status={processingStatus} />
        )}

        {/* Results */}
        {result && result.success && (
          <>
            <Separator />
            <ResultSection
              result={result}
              originalText={inputText}
              onNewProcessing={handleNewProcessing}
            />
          </>
        )}
      </div>

      {/* Footer Info */}
      <Card className="mt-12">
        <CardContent className="py-6">
          <div className="text-center space-y-3">
            <h3 className="font-medium">ü§ñ Powered by Seed-VC AI</h3>
            <p className="text-sm text-muted-foreground max-w-2xl mx-auto">
              C√¥ng ngh·ªá Voice Cloning ti√™n ti·∫øn gi√∫p t·∫°o ra gi·ªçng n√≥i t·ª± nhi√™n v√† s·ªëng ƒë·ªông. 
              Ph√π h·ª£p cho n·ªôi dung gi√°o d·ª•c, podcast, audiobook v√† c√°c ·ª©ng d·ª•ng s√°ng t·∫°o kh√°c.
            </p>
            <div className="flex flex-wrap justify-center gap-4 text-xs text-muted-foreground">
              <span>‚ú® Ch·∫•t l∆∞·ª£ng cao</span>
              <span>‚ö° X·ª≠ l√Ω nhanh</span>
              <span>üáªüá≥ H·ªó tr·ª£ ti·∫øng Vi·ªát</span>
              <span>üîí An to√†n b·∫£o m·∫≠t</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}